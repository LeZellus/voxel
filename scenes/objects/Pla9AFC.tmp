[gd_scene load_steps=18 format=3 uid="uid://cx6drcd7vxfvd"]

[ext_resource type="Script" path="res://scripts/player/PlayerController.gd" id="1_1yluk"]
[ext_resource type="Script" path="res://scripts/state_machine/StateMachine.gd" id="2_mytfj"]
[ext_resource type="Script" path="res://scripts/state_machine/IdleState.gd" id="3_qy6uw"]
[ext_resource type="Script" path="res://scripts/state_machine/WalkingState.gd" id="4_rwr3b"]
[ext_resource type="Script" path="res://scripts/state_machine/FarmingState.gd" id="5_vxp0e"]
[ext_resource type="Script" path="res://scripts/state_machine/JumpingState.gd" id="6_6gvi2"]
[ext_resource type="Script" path="res://scripts/manager/ToolSystem.gd" id="7_yvlqr"]
[ext_resource type="PackedScene" uid="uid://2oiup8qitv4y" path="res://assets/models/blender_exports/player.glb" id="9_lxqm3"]

[sub_resource type="GDScript" id="GDScript_ea7cy"]
script/source = "# InventoryManager.gd - Gestionnaire principal à attacher au joueur
extends Node

@export var inventory_ui_scene: PackedScene = preload(\"res://scenes/ui/InventoryUI.tscn\")

var inventory: Inventory
var inventory_ui: Control

func _ready():
	process_mode = Node.PROCESS_MODE_ALWAYS
	
	# Crée l'inventaire
	inventory = Inventory.new()
	add_child(inventory)
	
	# Attendre que l'inventory soit prêt
	await get_tree().process_frame
	
	# Crée l'interface
	create_inventory_ui()
	
	# Configure les actions d'input
	setup_input_actions()
	
func create_inventory_ui():
	
	if not inventory_ui_scene:
		print(\"Erreur: inventory_ui_scene non défini\")
		return
	
	# Instancie la scène
	inventory_ui = inventory_ui_scene.instantiate()
	inventory_ui.visible = false
	inventory_ui.process_mode = Node.PROCESS_MODE_ALWAYS
	
	# Ajoute à la scène
	get_tree().current_scene.add_child(inventory_ui)
	
	# Attendre que l'UI soit prête
	await get_tree().process_frame
	
	# Initialise l'UI avec l'inventory
	if inventory and inventory_ui and inventory_ui.has_method(\"setup_inventory\"):
		inventory_ui.setup_inventory(inventory, self)
	else:
		print(\"Erreur: Impossible d'initialiser l'UI\")
		print(\"inventory: \", inventory)
		print(\"inventory_ui: \", inventory_ui)

func setup_input_actions():
	if InputMap.has_action(\"toggle_inventory\"):
		InputMap.erase_action(\"toggle_inventory\")
	
	InputMap.add_action(\"toggle_inventory\")
	var key_event = InputEventKey.new()
	key_event.keycode = KEY_TAB
	InputMap.action_add_event(\"toggle_inventory\", key_event)

func _input(_event):
	if Input.is_action_just_pressed(\"toggle_inventory\"):
		if inventory_ui != null:
			toggle_inventory()
		else:
			print(\"Erreur: inventory_ui est null!\")

func toggle_inventory():
	if not inventory_ui:
		return
	
	if inventory_ui.visible:
		# Fermer
		AudioManager.play_ui_sound(\"ui_pop_off_1\")
		
		Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
		inventory_ui.hide_animated()
	else:
		# Ouvrir
		AudioManager.play_ui_sound(\"ui_pop_on_1\")
		
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
		inventory_ui.show_animated()

# Méthodes publiques pour interagir avec l'inventaire
func add_item_to_inventory(item: Item, quantity: int = 1) -> int:
	if inventory:
		return inventory.add_item(item, quantity)
	return quantity

func remove_item_from_inventory(item_id: String, quantity: int = 1) -> int:
	if inventory:
		return inventory.remove_item(item_id, quantity)
	return 0

func has_item_in_inventory(item_id: String, quantity: int = 1) -> bool:
	if inventory:
		return inventory.has_item(item_id, quantity)
	return false
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_4h0dh"]

[sub_resource type="Curve" id="Curve_abvta"]
_data = [Vector2(0, 0.718665), 0.0, 0.0, 0, 0, Vector2(0.144893, 1), 0.0, 0.0, 0, 0, Vector2(0.660333, 1), 0.0, 0.0, 0, 0, Vector2(0.824228, 0.8945), -1.78211, -1.78211, 0, 0, Vector2(1, 0), -6.70663, 0.0, 0, 0]
point_count = 5

[sub_resource type="CurveTexture" id="CurveTexture_7nnyw"]
width = 32
curve = SubResource("Curve_abvta")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_asvgt"]
lifetime_randomness = 0.33
emission_shape = 1
emission_sphere_radius = 0.3
direction = Vector3(0, 0, 0)
spread = 90.0
initial_velocity_min = -2.0
initial_velocity_max = 0.5
gravity = Vector3(0, 2, 0)
linear_accel_min = -2.23517e-06
linear_accel_max = 4.0
tangential_accel_min = -2.23517e-06
tangential_accel_max = 0.199998
scale_min = 2.0
scale_max = 2.0
scale_curve = SubResource("CurveTexture_7nnyw")

[sub_resource type="Gradient" id="Gradient_3hbs2"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_tjbeo"]
gradient = SubResource("Gradient_3hbs2")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_aliim"]
transparency = 1
blend_mode = 2
shading_mode = 2
vertex_color_use_as_albedo = true
albedo_texture = SubResource("GradientTexture1D_tjbeo")
emission_energy_multiplier = 0.0

[sub_resource type="BoxMesh" id="BoxMesh_0h7bh"]
material = SubResource("StandardMaterial3D_aliim")
size = Vector3(0.1, 0.1, 0.1)

[node name="Character" type="CharacterBody3D"]
script = ExtResource("1_1yluk")

[node name="SpringArm3D" type="SpringArm3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="SpringArm3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.00633, 0)

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("initial_state")]
script = ExtResource("2_mytfj")
initial_state = NodePath("Idle")

[node name="Idle" type="Node" parent="StateMachine"]
script = ExtResource("3_qy6uw")

[node name="Walking" type="Node" parent="StateMachine"]
script = ExtResource("4_rwr3b")

[node name="Farming" type="Node" parent="StateMachine"]
script = ExtResource("5_vxp0e")

[node name="Jumping" type="Node" parent="StateMachine"]
script = ExtResource("6_6gvi2")

[node name="ToolSystem" type="Node3D" parent="."]
script = ExtResource("7_yvlqr")

[node name="InventoryManager" type="Node3D" parent="."]
script = SubResource("GDScript_ea7cy")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_4h0dh")

[node name="CharacterSkin" parent="." instance=ExtResource("9_lxqm3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.997801, 0)

[node name="DustEffects" type="Node3D" parent="."]

[node name="DustParticles" type="GPUParticles3D" parent="DustEffects"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0025537, -0.99828, 0)
amount = 4
lifetime = 0.3
process_material = SubResource("ParticleProcessMaterial_asvgt")
draw_pass_1 = SubResource("BoxMesh_0h7bh")
