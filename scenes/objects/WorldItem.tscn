[gd_scene load_steps=2 format=3 uid="uid://bmxqrx242yj5q"]

[sub_resource type="GDScript" id="GDScript_fflvs"]
script/source = "# WorldItem.gd - Objet physique dans le monde
extends RigidBody3D

@export var item_data: Item  # La ressource Item qu'on va créer
@onready var mesh_instance: MeshInstance3D = $MeshInstance3D
@onready var collision_shape: CollisionShape3D = $CollisionShape3D

func _ready():
	setup_visual()
	setup_physics()

func setup_visual():
	if not item_data:
		print(\"Erreur: Aucune donnée d'item assignée!\")
		return
	
	# Applique le modèle 3D
	if item_data.world_mesh:
		mesh_instance.mesh = item_data.world_mesh
	else:
		print(\"Attention: Pas de modèle 3D pour \", item_data.name)

func setup_physics():
	if not item_data or not item_data.world_mesh or not collision_shape:
		return
	
	# Utilise une collision convexe au lieu de trimesh pour les objets mobiles
	var shape = item_data.world_mesh.create_convex_shape()
	collision_shape.shape = shape

# Fonction appelée quand le joueur interagit
func pickup() -> Item:
	if not item_data:
		return null
		
	print(\"Ramassage de: \", item_data.name)
	# Retourne une copie des données de l'item
	var item_copy = item_data.duplicate()
	queue_free()  # Supprime l'objet du monde
	return item_copy

# Pour l'interaction
func get_item_name() -> String:
	return item_data.name if item_data else \"Objet inconnu\"
"

[node name="WorldItem" type="RigidBody3D"]
script = SubResource("GDScript_fflvs")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
